function GenExtEvts( EEvTable )
% Generate extreme-event tables.
%
% It process all datasets in the FileInfo structure both individually and in aggregate.
% GenStats must have been called previously.
%
% Syntax is:  GenExtEvts( EEvTable )
%
% Example:
%
%     GenExtEvts( EEvTable )
%
% See also GenStats, GetRoot, MCrunch, ReadSettings

   global FileInfo ProgName AggRoot


      % Initialize.

   fprintf( '\n' );

   NumFiles = size( FileInfo.FileName, 1 );


      % No sense doing aggregate events if only one file is being processed.
      % Find the longest file name if we have more than one file.  Reserve at least nine characters.

   if ( NumFiles > 1 )
      FirstFile = 0;
      LongLine  = max( size( FileInfo.FileName{1}, 2 ), 9 );
   else
      FirstFile = 1;
   end


      % Process the aggregate if appropriate and individual data sets in the structure.

   for File=FirstFile:NumFiles


         % Write extreme-event tables.  Data should already be tabulated.

      if ( File == 0 )                                         % Aggregate events.

         fprintf( '  Generating aggregate extreme-event tables.\n' );

         fid = fopen( [ AggRoot, '.extr' ], 'wt' );
         if ( fid < 0 )
            beep
            error( '  Could not open "%s.ee" for writing.', AggRoot );
         end

      else                                                     % Individual analysis

         fprintf( '  Generating extreme-event tables for "%s".\n', FileInfo.FileName{File} );

         fid = fopen( [ GetRoot( FileInfo.FileName{File} ), '.extr' ], 'wt' );
         if ( fid < 0 )
            beep
            error( '  Could not open "%s.ee" for writing.', GetRoot( FileInfo.FileName{File} ) );
         end

      end % if

      DateTime = clock;

      fprintf( fid, '\nThese extreme-event tables were generated by %s on %s at %02d:%02d:%02d.\n', ProgName, date, uint8( DateTime(4:6) ) );


         % Generate the requested tables.

      for Tab=1:size( EEvTable, 2 )

         fprintf( fid, '\n\nExtreme events for %s:\n\n', EEvTable(Tab).Name );

         NumChans     = size( EEvTable(Tab).Chans   , 2 );
         NumInfoChans = size( EEvTable(Tab).InfChans, 2 );
         TotChans     = NumChans + NumInfoChans;
         MinVals      = zeros( TotChans, 1 );
         MaxVals      = MinVals;

         if ( File == 0 )                                         % Aggregate events.


               % Generate the header.

            Fmt = [ '                     ', repmat( ' ', 1, LongLine+2 ), repmat( '  %10s', 1, TotChans ), '\n' ];
            fprintf( fid, Fmt, FileInfo.Names{ [ EEvTable(Tab).Chans, EEvTable(Tab).InfChans ] } );
            Fmt = [ '  Parameter   Type     File Name', repmat( ' ', 1, LongLine-9 ), repmat( '  %10s', 1, TotChans ), '\n' ];
            fprintf( fid, Fmt, FileInfo.Units{ [ EEvTable(Tab).Chans, EEvTable(Tab).InfChans ] } );
            Fmt = [ '  ---------   ----     ---------', repmat( ' ', 1, LongLine-9 ), repmat( ' -----------', 1, TotChans ), '\n' ];
            fprintf( fid, Fmt );

            Fmt = [ '  %-10s  %-7s  %-', sprintf( '%d', LongLine ), 's', repmat( ' %11.3e', 1, TotChans ), '\n' ];

            for Chan=1:NumChans

               EEChan = EEvTable(Tab).Chans(Chan);
               MinInd = FileInfo.Stats.AggMinInds(EEChan);
               MaxInd = FileInfo.Stats.AggMaxInds(EEChan);

               for C=1:NumChans
                  Ch         = EEvTable(Tab).Chans(C);
                  MinVals(C) = FileInfo.Time(MinInd,Ch);
                  MaxVals(C) = FileInfo.Time(MaxInd,Ch);
               end % for C

               for C=1:NumInfoChans
                  Ch                  = EEvTable(Tab).InfChans(C);
                  MinVals(C+NumChans) = FileInfo.Time(MinInd,Ch);
                  MaxVals(C+NumChans) = FileInfo.Time(MaxInd,Ch);
               end % for C

               FileName = FileInfo.FileName{NumFiles};

               for F=2:NumFiles
                  if ( MinInd < FileInfo.StartLine(F) )
                     FileName = FileInfo.FileName{F-1};
                     break
                  end % if
               end % for F

               fprintf( fid, Fmt, FileInfo.Names{EEChan}, 'Minimum', FileName, MinVals );

               FileName = FileInfo.FileName{NumFiles};

               for F=2:NumFiles
                  if ( MaxInd < FileInfo.StartLine(F) )
                     FileName = FileInfo.FileName{F-1};
                     break
                  end % if
               end % for F

               fprintf( fid, Fmt, FileInfo.Names{EEChan}, 'Maximum', FileName, MaxVals );

            end % for Chan

         else                                                     % Individual-file events.


               % Generate the header.

            Fmt = [ '                     ', repmat( '  %10s', 1, TotChans ), '\n' ];
            fprintf( fid, Fmt, FileInfo.Names{ [ EEvTable(Tab).Chans, EEvTable(Tab).InfChans ] } );
            Fmt = [ '  Parameter   Type   ', repmat( '  %10s', 1, TotChans ), '\n' ];
            fprintf( fid, Fmt, FileInfo.Units{ [ EEvTable(Tab).Chans, EEvTable(Tab).InfChans ] } );
            Fmt = [ '  ---------   ----   ', repmat( ' -----------', 1, TotChans ), '\n' ];
            fprintf( fid, Fmt );

            Fmt = [ '  %-10s  %-7s', repmat( ' %11.3e', 1, TotChans ), '\n' ];

            for Chan=1:NumChans

               EEChan = EEvTable(Tab).Chans(Chan);
               MinInd = FileInfo.StartLine(File) + FileInfo.Stats.MinInds(File,EEChan) - 1;
               MaxInd = FileInfo.StartLine(File) + FileInfo.Stats.MaxInds(File,EEChan) - 1;

               for C=1:NumChans
                  Ch         = EEvTable(Tab).Chans(C);
                  MinVals(C) = FileInfo.Time(MinInd,Ch);
                  MaxVals(C) = FileInfo.Time(MaxInd,Ch);
               end % for C

               for C=1:NumInfoChans
                  Ch                  = EEvTable(Tab).InfChans(C);
                  MinVals(C+NumChans) = FileInfo.Time(MinInd,Ch);
                  MaxVals(C+NumChans) = FileInfo.Time(MaxInd,Ch);
               end % for C

               fprintf( fid, Fmt, FileInfo.Names{EEChan}, 'Minimum', MinVals );
               fprintf( fid, Fmt, FileInfo.Names{EEChan}, 'Maximum', MaxVals );

            end % for Chan

         end % if

      end % for Tab

      fclose( fid );

   end % for File

   return

end % function GenExtEvts
