function GenBins( UseBinAv, PltBins, PltRawData, WrBinsTxt, WrBinsXLS, SettingsFile )
% Bin data in one or two dimensions.
%
% This works only with the aggregate of all the files.
%
% Syntax is:  GenBins( UseBinAv, PltBins, PltRawData, WrBinsTxt, SettingsFile )
%
%     where:
%        UseBinAv:      A boolean scalar that indicates if the user wants to use
%                       average values instead of the bin centers when reporting
%                       the locations of 1-D bins.
%        PltBins:       A boolean scalar that indicates if the user wants to
%                       generate plots of the binned data.
%        PltRawData:    A boolean scalar that indicates if the user wants to
%                       include the raw (unbinned) data on the plots.
%        WrBinsTxt:     A boolean scalar that indicates if the user wants to
%                       write the bins to a plain text file.
%        WrBinsXLS:     A boolean scalar that indicates if the user wants to
%                       write the bins to an Excel workbook.
%        SettingsFile:  The name of the file that contained the basic settings
%                       for MCrunch.
%
% Example:
%     GenBins( true, false, false, true, false, 'Test_Bins.mcru' )
%
% See also DelFile, DelSheet1, GetRoot, MCrunch, ReadSettings

   global Binning ChartPosition FigTitles FileInfo LineWidth ProgName SaveFigs


   fprintf( '\n  Binning data:\n' );

   NumDepChans = size( Binning, 2 );


      % If we are going to write the results to a file, open it now and create its header.

   if ( WrBinsTxt )

      HdlBF = fopen( [ GetRoot( SettingsFile ), '.bins' ], 'wt' );

      if ( HdlBF < 0 )
         beep
         error( '  Could not open the bins file "%s.bins" for writing.', GetRoot( SettingsFile ) );
      end

      DateTime = clock;

      fprintf( HdlBF, '\nThese binned data were generated by %s on %s at %02d:%02d:%02d.\n', ProgName, date, uint8( DateTime(4:6) ) );

      if ( size( FileInfo.StartLine, 2 ) == 1 )
         fprintf( HdlBF, '\nThe analysis was based upon %d rows from "%s".\n', FileInfo.TotLines, FileInfo.FileName{1} );
      else
         fprintf( HdlBF, '\nThe analysis was based upon %d rows from an aggregate of %d files.\n', FileInfo.TotLines, size( FileInfo.StartLine, 2 ) );
      end % if

   end % if


      % If requested, set up the name of the Excel file.  Delete the file if it already exists

   if ( WrBinsTxt )

      XLSfile = [ GetRoot( SettingsFile ), '_Bins.xls' ];

      DelFile( XLSfile );

   end % if


      % Bin each of the requested dependent channels.

   for Ch=1:NumDepChans

      DepCh    = Binning(Ch).DepChan;
      IndCh1   = Binning(Ch).IndChan1;
      BinWid1  = Binning(Ch).BinWid1;
      ND       = Binning(Ch).NumDims;
      NumFiles = size( FileInfo.FileName, 1 );

      if ( NumFiles > 1 )
         Min1 = FileInfo.Stats.AggMinima(IndCh1);
         Max1 = FileInfo.Stats.AggMaxima(IndCh1);
      else
         Min1 = FileInfo.Stats.Minima(IndCh1);
         Max1 = FileInfo.Stats.Maxima(IndCh1);
      end % if

      if ( ND == 1 )
         Titl = [ FileInfo.Names{DepCh}, '(', FileInfo.Names{IndCh1}, ')' ];
         fprintf( '    %s\n', Titl );
      else

         IndCh2  = Binning(Ch).IndChan2;
         BinWid2 = Binning(Ch).BinWid2;

         if ( NumFiles > 1 )
            Min2 = FileInfo.Stats.AggMinima(IndCh2);
            Max2 = FileInfo.Stats.AggMaxima(IndCh2);
         else
            Min2 = FileInfo.Stats.Minima(IndCh2);
            Max2 = FileInfo.Stats.Maxima(IndCh2);
         end % if

         Titl = [ FileInfo.Names{DepCh}, '(', FileInfo.Names{IndCh1}, ',', FileInfo.Names{IndCh2}, ')' ];
         fprintf( '    %s\n', Titl );

      end % if


         % Set up the bins.

      BinMin1  = BinWid1*floor( Min1/BinWid1 );
      NumBins1 = ceil( ( Max1 - BinMin1 )/BinWid1 );

      Binning(Ch).BinEdges1 = zeros( NumBins1, 1 );

      for Bin=1:NumBins1
         Binning(Ch).BinEdges1(Bin) = ( Bin - 1 )*BinWid1 + BinMin1;
      end % for Bin

      if ( ND == 2 )

         BinMin2  = BinWid2*floor( Min2/BinWid2 );
         NumBins2 = ceil( ( Max2 - BinMin2 )/BinWid2 );

         Binning(Ch).BinEdges2 = zeros( NumBins2, 1 );

         for Bin=1:NumBins2
            Binning(Ch).BinEdges2(Bin) = ( Bin - 1 )*BinWid2 + BinMin2;
         end % for Bin

      else

         NumBins2 = 1;

         if ( UseBinAv )
            Binning(Ch).BinAvgs = zeros( NumBins1, 1 );
         end % if

      end % if


         % Bin the data.

      Binning(Ch).BinData = zeros( NumBins1, NumBins2 );
      NumPts              = zeros( NumBins1, NumBins2 );

      for Pt=1:FileInfo.TotLines

         Ind1 = ceil( ( FileInfo.Time(Pt,IndCh1) - BinMin1 )/BinWid1 );

         if ( ND == 2 )
            Ind2 = ceil( ( FileInfo.Time(Pt,IndCh2) - BinMin2 )/BinWid2 );
         else
            Ind2 = 1;
         end % if

         Binning(Ch).BinData(Ind1,Ind2) = Binning(Ch).BinData(Ind1,Ind2) + FileInfo.Time(Pt,DepCh);

         if ( UseBinAv && NumBins2==1 )
            Binning(Ch).BinAvgs(Ind1) = Binning(Ch).BinAvgs(Ind1) + FileInfo.Time(Pt,IndCh1);
         end % if

         NumPts(Ind1,Ind2)              = NumPts(Ind1,Ind2)  + 1;

      end % for Pt


         % Compute the averages.

      for Ind1=1:NumBins1
         for Ind2=1:NumBins2
            if ( NumPts(Ind1,Ind2) > 0 )
               Binning(Ch).BinData(Ind1,Ind2) = Binning(Ch).BinData(Ind1,Ind2)/NumPts(Ind1,Ind2);
            else
               Binning(Ch).BinData(Ind1,Ind2) = 0.0;
            end % if
         end % for Ind2
      end % for Ind1


         % if this was a 1-D bin and the use of bin averages was requested, compute the averages.

      if ( UseBinAv && NumBins2==1 )
         for Ind1=1:NumBins1
            if ( NumPts(Ind1,1) > 0 )
                  Binning(Ch).BinAvgs(Ind1) = Binning(Ch).BinAvgs(Ind1)/NumPts(Ind1,1);
            else
                  Binning(Ch).BinAvgs(Ind1) = Binning(Ch).BinEdges1(Bin) + 0.5*BinWid1;
            end % if
         end % for Ind1
      end % if


         % Plot the results.  Plot just one channel on each figure.

      if ( PltBins )


            % Close it if it already exists.  Determine the appropriate size for the title.

         HdlFig = figure( 30000+Ch );
         Title  = [ 'Binned ', Titl ];

         if ( FigTitles )
            set( HdlFig, 'Position', ChartPosition );
            HdlTxt = text( 0, 0, Title, 'FontName','Trebuchet MS', 'FontSize',16, 'FontWeight','bold', 'Units','normalized' );
            TitExt = get( HdlTxt, 'extent' );
         end % if

         close( HdlFig );
         HdlFig = figure( 30000+Ch );

         set( HdlFig, 'Position', ChartPosition );


            % Add an overall title that is centered at the top of the figure.

         if ( FigTitles )
            HdlTit = annotation('textbox', 'String',Title, 'FontName','Trebuchet MS', 'FontSize',16, 'FontWeight','bold' );
            set( HdlTit, 'Color', [0.0, 0.0, 1.0 ], 'LineStyle','none' );
            set( HdlTit, 'Units','normalized', 'HorizontalAlignment','center', 'VerticalAlignment','top' );
            set( HdlTit, 'Position', [ 0.5*(1-TitExt(3)), 1-TitExt(4), TitExt(3), TitExt(4) ] )
         end % if


            % This is the Figure/Window title.

         set( HdlFig, 'Color',[1 1 1], 'Name',Title, 'NumberTitle','off', 'PaperOrientation','landscape', 'PaperSize',[11.0, 8.5], 'PaperPosition',[0.25 0.75 10.5 7.0], 'PaperType','usletter' );


         if ( ND == 1 )


               % Optionally include the raw data points with markers.

            if ( PltRawData )
               plot( FileInfo.Time(:,IndCh1), FileInfo.Time(:,DepCh), 'LineStyle','none', 'Marker','.', 'MarkerEdgeColor','c', 'MarkerFaceColor','b', 'MarkerSize',4  );
               hold on;
            end % if


               % Do a 2-D line plot of the binned data.
               % Use bin averages or put the points at the centers of the bins.
               % We do this last so it is on top.

            if ( UseBinAv )
               plot( Binning(Ch).BinAvgs, Binning(Ch).BinData, 'k', 'LineWidth', LineWidth );
            else
               plot( Binning(Ch).BinEdges1+0.5*BinWid1, Binning(Ch).BinData, 'k', 'LineWidth', LineWidth );
            end % if

            hold off;


               % Label it and make it pretty.

            set( gca, 'FontName','Trebuchet MS', 'FontSize',11, 'FontWeight','bold', 'LineWidth',1.2, 'XColor',[0 0 0], 'YColor',[0 0 0] );
            grid on;
            xlabel( [FileInfo.Names{IndCh1},' ',FileInfo.Units{IndCh1}], 'FontName','Trebuchet MS', 'FontSize',14, 'FontWeight','bold' );
            ylabel( [FileInfo.Names{DepCh },' ',FileInfo.Units{DepCh }], 'FontName','Trebuchet MS', 'FontSize',14, 'FontWeight','bold' );

         else


               % DO a 3-D surface plot.

            meshc( Binning(Ch).BinEdges2+0.5*BinWid2, Binning(Ch).BinEdges1+0.5*BinWid1, Binning(Ch).BinData );


               % Label it and make it pretty.

            set( gca, 'FontName','Trebuchet MS', 'FontSize',11, 'FontWeight','bold', 'LineWidth',1.2, 'XColor',[0 0 0], 'YColor',[0 0 0] );
            grid on;
            xlabel( [FileInfo.Names{IndCh1},' ',FileInfo.Units{IndCh1}], 'FontName','Trebuchet MS', 'FontSize',14, 'FontWeight','bold' );
            ylabel( [FileInfo.Names{IndCh2},' ',FileInfo.Units{IndCh2}], 'FontName','Trebuchet MS', 'FontSize',14, 'FontWeight','bold' );
            zlabel( [FileInfo.Names{DepCh },' ',FileInfo.Units{DepCh }], 'FontName','Trebuchet MS', 'FontSize',14, 'FontWeight','bold' );

         end % if

         if ( SaveFigs )
            saveas( HdlFig, [ Title, '.fig' ] )
         end % if

      end % if


         % Create plain-text bin file if requested.

      if ( WrBinsTxt )
         WrTxt;
      end % if


         % Create an Excel workbook with one sheet for the aggregate and one for each file if requested.

      if ( WrBinsXLS )
         WrXLS;
      end

   end % for Ch

   if ( WrBinsTxt )
      fclose( HdlBF );
   end % if

   if ( WrBinsXLS )
      DelSheet1( XLSfile );
   end

   fprintf( '  Done.\n' );


   return
%===============================================================================
   function WrTxt

         % This function writes the binned data for the current dependent channel to bins file.

      if ( ND == 1 )
         fprintf( HdlBF, '\n\nBinned %s:\n', Titl );
         fprintf( HdlBF, '\n%s\t%s\n', FileInfo.Names{IndCh1}, FileInfo.Names{DepCh} );
         if ( UseBinAv )
            fprintf( HdlBF, '%f\t%f\n', [ Binning(Ch).BinAvgs'; Binning(Ch).BinData' ] );
         else
            fprintf( HdlBF, '%f\t%f\n', [ (Binning(Ch).BinEdges1+0.5*BinWid1)'; Binning(Ch).BinData' ] );
         end % if
      else
         fprintf( HdlBF, '\n\nBinned %s:\n', Titl );
         fprintf( HdlBF, '\n\t%s\n', FileInfo.Names{IndCh2} );
         fprintf( HdlBF, FileInfo.Names{IndCh1} );
         fprintf( HdlBF, [ repmat( '\t%f', 1, NumBins2 ), '\n' ], Binning(Ch).BinEdges2+0.5*BinWid2 );
         fprintf( HdlBF, [  '%f', repmat( '\t%f', 1, NumBins2 ), '\n' ], [ (Binning(Ch).BinEdges1+0.5*BinWid1)'; Binning(Ch).BinData' ] );
      end % if ( ND == 1 )

      return

   end % function WrTxt
   %===============================================================================
   function WrXLS
   % Write the binned data to an Excel file.


         % Turn off warnings regarding adding sheets to the workbook.

      warning off MATLAB:xlswrite:AddSheet


         % Get the date and time.

      DateTime = clock;
      Date     = date;


         % Add one sheet for each dependent channel.

      if ( ND == 1 )
         NRows =  NumBins1 + 5;
      else
         NRows =  NumBins1 + 6;
      end % if

      Info = cell( NRows, NumBins2+1 );

      Info{1}       = sprintf( 'These binned data of %s were generated by %s on %s at %02d:%02d:%02d.', Titl, ProgName, Date, uint8( DateTime(4:6) ) );
      Info{3}       = sprintf( 'The analysis was based upon %d rows from an aggregate of %d files.',  FileInfo.TotLines, NumFiles );

      if ( ND == 1 )

         Info(5,1:2) = { FileInfo.Names{DepCh}, FileInfo.Names{IndCh1} };

         if ( UseBinAv )
            Info(6:end,1) = mat2cell( Binning(Ch).BinAvgs, repmat(1,NumBins1,1), 1 );
         else
            Info(6:end,1) = mat2cell( (Binning(Ch).BinEdges1+0.5*BinWid1), repmat(1,NumBins1,1), 1 );
         end % if

         Info(6:end,2) = mat2cell( Binning(Ch).BinData, repmat(1,NumBins1,1), 1 );

      else
         Info(5,1:2)       = { ' ', FileInfo.Names{IndCh2} };
         Info{6,1}         = FileInfo.Names{IndCh1};
         Info(6,2:end)     =  mat2cell( Binning(Ch).BinEdges2'+0.5*BinWid2, 1, repmat(1,NumBins2,1) );
         Info(7:end,1)     = mat2cell( (Binning(Ch).BinEdges1+0.5*BinWid1), repmat(1,NumBins1,1), 1 );
         Info(7:end,2:end) = mat2cell( Binning(Ch).BinData, repmat(1,NumBins1,1), repmat(1,NumBins2,1) );
      end % if

      xlswrite( XLSfile, Info, Titl, 'A2' );


      return

   end % function WrXLS
%===============================================================================

end % function GenBins( UseBinAv, PltBins, PltRawData, WrBinsTxt, SettingsFile )
