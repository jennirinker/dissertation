diff -crB fast_build_structure/fast/Simulink/Source/FASTGateway.f90 new_build_structure/fast/Simulink/Source/FASTGateway.f90
*** fast_build_structure/fast/Simulink/Source/FASTGateway.f90	2012-02-18 03:56:15.000000000 +0100
--- new_build_structure/fast/Simulink/Source/FASTGateway.f90	2013-04-08 10:28:54.000000000 +0200
***************
*** 47,56 ****
        !----------------------------------------------------------------------------------------------
  
     INTEGER(4), PARAMETER        :: mxREAL      = 0         ! MATLAB uses 0 for REAL numbers; 1 for COMPLEX
!    INTEGER,    PARAMETER        :: mwPointer   = 4         ! Size of pointer variables; replace 4 with 8 on DE! Alpha and the SGI 64-bit platforms
!    INTEGER,    PARAMETER        :: mwSize      = 4         ! Size of size variables; replace 4 with 8 on DE! Alpha and the SGI 64-bit platforms
     REAL(mxDB), PARAMETER        :: HUGE        = 1.0E+33
!    INTEGER(4), PARAMETER        :: NSIZES      = 6         ! Number of elements in the size array
     
     INTEGER,    PARAMETER        :: MaxDOFs     = 24        ! Maximum number of DOFs:    required b/c of MATLAB R2009b bug that says ALLOCATABLE arrays do not work with mex* and mx* API functions
     INTEGER,    PARAMETER        :: MaxNumBl    = 3         ! Maximum number of blades:  required b/c of MATLAB R2009b bug that says ALLOCATABLE arrays do not work with mex* and mx* API functions
--- 47,56 ----
        !----------------------------------------------------------------------------------------------
  
     INTEGER(4), PARAMETER        :: mxREAL      = 0         ! MATLAB uses 0 for REAL numbers; 1 for COMPLEX
!    INTEGER,    PARAMETER        :: mwPointer   = 8         ! Size of pointer variables; replace 4 with 8 on DE! Alpha and the SGI 64-bit platforms
!    INTEGER,    PARAMETER        :: mwSize      = 8         ! Size of size variables; replace 4 with 8 on DE! Alpha and the SGI 64-bit platforms
     REAL(mxDB), PARAMETER        :: HUGE        = 1.0E+33
!    INTEGER(mwSize), PARAMETER   :: NSIZES      = 6         ! Number of elements in the size array
     
     INTEGER,    PARAMETER        :: MaxDOFs     = 24        ! Maximum number of DOFs:    required b/c of MATLAB R2009b bug that says ALLOCATABLE arrays do not work with mex* and mx* API functions
     INTEGER,    PARAMETER        :: MaxNumBl    = 3         ! Maximum number of blades:  required b/c of MATLAB R2009b bug that says ALLOCATABLE arrays do not work with mex* and mx* API functions
***************
*** 102,108 ****
     INTEGER(mwSize)              :: N                       ! Number of columns in array
     INTEGER                      :: Stat                    ! Return status
  
!    INTEGER(mwSize)              :: MDLsizes(NSIZES)        ! Local array, containing the SimuLink SIZE array that is required as input/output
     REAL(mxDB)                   :: DSIZE   (NSIZES)        ! Local array = DOUBLE(MDLsizes), used to output the MDLsizes array
     REAL(mxDB)                   :: NXTHIT                  ! return value for next time (not used)
  
--- 102,108 ----
     INTEGER(mwSize)              :: N                       ! Number of columns in array
     INTEGER                      :: Stat                    ! Return status
  
!    INTEGER                      :: MDLsizes(NSIZES)        ! Local array, containing the SimuLink SIZE array that is required as input/output
     REAL(mxDB)                   :: DSIZE   (NSIZES)        ! Local array = DOUBLE(MDLsizes), used to output the MDLsizes array
     REAL(mxDB)                   :: NXTHIT                  ! return value for next time (not used)
  
***************
*** 139,145 ****
     IF ( ptr_retrn == 0 ) THEN
        CALL ProgAbort('ERROR: Variable "NumBl" does not exist in the MATLAB workspace.')
     ELSE
!       CALL mxCopyPtrToReal8(mxGetPr(ptr_retrn), retrn_dp, 1)
        NumBl = INT(retrn_dp)
     ENDIF
  
--- 139,145 ----
     IF ( ptr_retrn == 0 ) THEN
        CALL ProgAbort('ERROR: Variable "NumBl" does not exist in the MATLAB workspace.')
     ELSE
!       CALL mxCopyPtrToReal8(mxGetPr(ptr_retrn), retrn_dp, INT(1, mwSize))
        NumBl = INT(retrn_dp)
     ENDIF
  
***************
*** 148,154 ****
     IF ( ptr_retrn == 0 ) THEN
        CALL ProgAbort('ERROR: Variable "NDOF" does not exist in the MATLAB workspace.')
     ELSE
!       CALL mxCopyPtrToReal8(mxGetPr(ptr_retrn), retrn_dp, 1)
        NDOF = INT(retrn_dp)
     ENDIF
  
--- 148,154 ----
     IF ( ptr_retrn == 0 ) THEN
        CALL ProgAbort('ERROR: Variable "NDOF" does not exist in the MATLAB workspace.')
     ELSE
!       CALL mxCopyPtrToReal8(mxGetPr(ptr_retrn), retrn_dp, INT(1, mwSize))
        NDOF = INT(retrn_dp)
     ENDIF
  
***************
*** 157,163 ****
     IF ( ptr_retrn == 0 ) THEN
        CALL ProgAbort('ERROR: Variable "NumOuts" does not exist in the MATLAB workspace.')
     ELSE
!       CALL mxCopyPtrToReal8(mxGetPr(ptr_retrn), retrn_dp, 1)
        NumOuts = INT(retrn_dp)
     ENDIF
  
--- 157,163 ----
     IF ( ptr_retrn == 0 ) THEN
        CALL ProgAbort('ERROR: Variable "NumOuts" does not exist in the MATLAB workspace.')
     ELSE
!       CALL mxCopyPtrToReal8(mxGetPr(ptr_retrn), retrn_dp, INT(1, mwSize))
        NumOuts = INT(retrn_dp)
     ENDIF
  
***************
*** 236,243 ****
  
        !bjj: this should be done after the call to FAST_Init to allow NDOF and other parameters stored in MDLsizes() to be
        !     retreived from Fortran, rather than a variable in the Matlab workspace!
!       
!       PLHS(1)     = mxCreateDoubleMatrix(NSIZES, 1, mxREAL)                       ! Create NSIZES x 1 REAL array for the first output, y1
        ptr_Y       = mxGetPr(PLHS(1))                                              ! Get the address of the first element of the data
        DSIZE(:)    = REAL( MDLsizes(:), mxDB )                                     ! Integer(4) to Real(8)
        CALL mxCopyReal8ToPtr(DSIZE, ptr_Y, NSizes)                                 ! Copy the SIZE vector (DSize) to the output array pointed to by PLHS(1)
--- 236,243 ----
  
        !bjj: this should be done after the call to FAST_Init to allow NDOF and other parameters stored in MDLsizes() to be
        !     retreived from Fortran, rather than a variable in the Matlab workspace!
! 
!       PLHS(1)     = mxCreateDoubleMatrix(NSIZES, INT(1, mwSize), mxREAL)                       ! Create NSIZES x 1 REAL array for the first output, y1
        ptr_Y       = mxGetPr(PLHS(1))                                              ! Get the address of the first element of the data
        DSIZE(:)    = REAL( MDLsizes(:), mxDB )                                     ! Integer(4) to Real(8)
        CALL mxCopyReal8ToPtr(DSIZE, ptr_Y, NSizes)                                 ! Copy the SIZE vector (DSize) to the output array pointed to by PLHS(1)
***************
*** 246,252 ****
           ! *** Output argument y2 contains the initial states (ptr_X0) ***
  
        IF (NLHS > 1) THEN  ! [y1, y2]=FAST_SFunc();                                ! bjj: Since we have no states, this creates an empty array
!          PLHS(2) = mxCreateDoubleMatrix(MDLsizes(1)+MDLsizes(2), 1, mxREAL)
        ENDIF
  
        NXTHIT =  HUGE
--- 246,252 ----
           ! *** Output argument y2 contains the initial states (ptr_X0) ***
  
        IF (NLHS > 1) THEN  ! [y1, y2]=FAST_SFunc();                                ! bjj: Since we have no states, this creates an empty array
!          PLHS(2) = mxCreateDoubleMatrix(INT((MDLsizes(1) + MDLsizes(2)), mwSize), INT(1, mwSize), mxREAL)
        ENDIF
  
        NXTHIT =  HUGE
***************
*** 359,365 ****
                 ! We don't have any so just create an empty array and return;
  
              IF (NLHS >= 0) THEN
!                PLHS(1) = mxCreateDoubleMatrix(MDLsizes(1), 1, mxREAL)
              ENDIF
  
           CASE (2, -2)
--- 359,365 ----
                 ! We don't have any so just create an empty array and return;
  
              IF (NLHS >= 0) THEN
!                PLHS(1) = mxCreateDoubleMatrix(INT(MDLsizes(1), mwSize), INT(1, mwSize), mxREAL)
              ENDIF
  
           CASE (2, -2)
***************
*** 371,377 ****
                 ! We don't have any so just create an empty array and return;
  
              IF (NLHS >= 0) THEN
!                PLHS(1) = mxCreateDoubleMatrix(MDLsizes(2), 1, mxREAL)
              ENDIF
  
           CASE (3, -3)
--- 371,377 ----
                 ! We don't have any so just create an empty array and return;
  
              IF (NLHS >= 0) THEN
!                PLHS(1) = mxCreateDoubleMatrix(INT(MDLsizes(2), mwSize), INT(1, mwSize), mxREAL)
              ENDIF
  
           CASE (3, -3)
***************
*** 406,412 ****
  !                  ALLOCATE ( U(MDLsizes(4)) , STAT=Stat )
  !                  IF (Stat /= 0) CALL ProgAbort( 'Error allocating memory for the U array.' )
  !               END IF
!                CALL mxCopyPtrToReal8(ptr_U,   U(1:MDLsizes(4)),   MDLsizes(4))
  
  
  !                  ! Set up the OUTPUT array, Y
--- 406,412 ----
  !                  ALLOCATE ( U(MDLsizes(4)) , STAT=Stat )
  !                  IF (Stat /= 0) CALL ProgAbort( 'Error allocating memory for the U array.' )
  !               END IF
!                CALL mxCopyPtrToReal8(ptr_U,   U(1:MDLsizes(4)),   INT(MDLsizes(4), mwSize))
  
  
  !                  ! Set up the OUTPUT array, Y
***************
*** 419,432 ****
  
                    ! Get output results for this time
  
! 	            CALL BlockOUTPUT(NumBl, NDOF, NumOuts, T, U(1:MDLsizes(4)), Y(1:MDLsizes(3)))
  
  
                    ! Create the OUTPUT array for MATLAB
  
!                PLHS(1) = mxCreateDoubleMatrix(MDLsizes(3), 1, mxREAL)
!                ptr_Y   = mxGetPr(PLHS(1))                                     ! get a pointer to the output array
! 	            CALL mxCopyReal8ToPtr(Y(1:MDLsizes(3)), ptr_Y, MDLsizes(3))    ! Load the FORTRAN Y output into the MATLAB Y array (PLHS).
  
  
  !	               ! Deallocate the arrays
--- 419,432 ----
  
                    ! Get output results for this time
  
!                 CALL BlockOUTPUT(NumBl, NDOF, NumOuts, T, U(1:MDLsizes(4)), Y(1:MDLsizes(3)))
  
  
                    ! Create the OUTPUT array for MATLAB
  
!                 PLHS(1) = mxCreateDoubleMatrix(INT(MDLsizes(3), mwSize), INT(1, mwSize), mxREAL)
!                 ptr_Y   = mxGetPr(PLHS(1))                                     ! get a pointer to the output array
!                 CALL mxCopyReal8ToPtr(Y(1:MDLsizes(3)), ptr_Y, INT(MDLsizes(3), mwSize))    ! Load the FORTRAN Y output into the MATLAB Y array (PLHS).
  
  
  !	               ! Deallocate the arrays
***************
*** 445,451 ****
                 ! bjj: NXTHIT is never updated (not used unless variable discrete-time sample time is specified)
  
              IF (NLHS >= 0) THEN
!                PLHS(1) = mxCreateDoubleMatrix(1, 1, mxREAL)
                 ptr_Y   = mxGetPr(PLHS(1))
                 CALL mxCopyReal8ToPtr(NXTHIT, ptr_Y, 1)
              ENDIF
--- 445,451 ----
                 ! bjj: NXTHIT is never updated (not used unless variable discrete-time sample time is specified)
  
              IF (NLHS >= 0) THEN
!                PLHS(1) = mxCreateDoubleMatrix(INT(1, mwSize), INT(1, mwSize), mxREAL)
                 ptr_Y   = mxGetPr(PLHS(1))
                 CALL mxCopyReal8ToPtr(NXTHIT, ptr_Y, 1)
              ENDIF
***************
*** 459,465 ****
                 ! We don't have any so just create an empty array and return;
  
              IF (NLHS >= 0) THEN
!                PLHS(1) = mxCreateDoubleMatrix(MDLsizes(5), 1, mxREAL)
              ENDIF
  
           CASE (9, -9)
--- 459,465 ----
                 ! We don't have any so just create an empty array and return;
  
              IF (NLHS >= 0) THEN
!                PLHS(1) = mxCreateDoubleMatrix(INT(MDLsizes(5), mwSize), INT(1, mwSize), mxREAL)
              ENDIF
  
           CASE (9, -9)
diff -crB fast_build_structure/fast/Simulink/Source/FASTSimulink.f90 new_build_structure/fast/Simulink/Source/FASTSimulink.f90
*** fast_build_structure/fast/Simulink/Source/FASTSimulink.f90	2013-01-18 21:42:40.000000000 +0100
--- new_build_structure/fast/Simulink/Source/FASTSimulink.f90	2013-04-08 10:28:54.000000000 +0200
***************
*** 362,369 ****
  
     USE                           AeroDyn
  
!    INTEGER, INTENT(IN)        :: M
!    INTEGER, INTENT(IN)        :: N
  
     REAL(mxDB), INTENT(IN)     :: Time
     REAL(mxDB), INTENT(IN)     :: Position(M,N)
--- 362,369 ----
  
     USE                           AeroDyn
  
!    INTEGER(8), INTENT(IN)        :: M
!    INTEGER(8), INTENT(IN)        :: N
  
     REAL(mxDB), INTENT(IN)     :: Time
     REAL(mxDB), INTENT(IN)     :: Position(M,N)
diff -crB fast_build_structure/nwtc/source/Makefile new_build_structure/nwtc/source/Makefile
*** fast_build_structure/nwtc/source/Makefile	2012-11-16 22:51:11.000000000 +0100
--- new_build_structure/nwtc/source/Makefile	2013-04-08 10:28:54.000000000 +0200
***************
*** 1,48 ****
  FC = gfortran
- FFLAGS = -x f95-cpp-input -ffree-line-length-none
- 
- SOURCES_STD =  \
-   ModMesh.f90 \
-   NWTC_Aero.f90 \
-   NWTC_IO.f90 \
-   NWTC_Library.f90 \
-   NWTC_Num.f90 \
-   SingPrec.f90
- 
- SOURCES_SYS = SysGnuLinux.f90
- 
- SOURCES = $(SOURCES_STD) $(SOURCES_SYS)
- 
- OBJ = $(SOURCES:.f90=.o)
- 
- .SUFFIXES : .f90 .o
- 
- .f90.o:
- 	$(FC) $(FFLAGS) $(INCLUDE) $< -c -o $@
- 
- default: libnwtc.a
- 
- libnwtc.a : $(OBJ)
- 	ar cr libnwtc.a $(OBJ)
- 	ranlib libnwtc.a
  
  clean:
! 	/bin/rm -f *.o *.mod *.a
! 
! ### DO NOT DELETE OR EDIT THIS LINE
! # Everything from here on down is generated by f90depend
! # so do NOT add any translation rules below here.
! 
! 
! 
! #--- Module-Dependencies
! 
! NWTC_Aero.o: NWTC_IO.o NWTC_Num.o
! NWTC_IO.o: SysGnuLinux.o
! NWTC_Library.o: NWTC_Aero.o ModMesh.o
! NWTC_Num.o: NWTC_IO.o
! SysGnuLinux.o: SingPrec.o
! ModMesh.o: SingPrec.o
! 
! 
! 
--- 1,44 ----
  FC = gfortran
  
+ SRC = DoubPrec.f90
+ SRC += ModMesh.f90
+ SRC += SysGnuLinux.f90
+ SRC += SysMatlab.f90
+ SRC += NWTC_IO.f90
+ SRC += NWTC_Num.f90
+ SRC += NWTC_Aero.f90
+ SRC += NWTC_Library.f90
+ 
+ OBJ = $(SRC:.f90=.o)
+ 
+ ifdef BASEDIR
+ 	INCLUDE = $(BASEDIR)/include
+ 	MODDIR = $(BASEDIR)/include
+ else
+ 	MODDIR = ./
+ endif
+ 
+ ifndef OUTDIR
+ 	OUTDIR = ./
+ endif
+ 
+ all: checkdir $(SRC:.f90=.d) $(addprefix $(OUTDIR)/,$(OBJ))
+ 
+ $(OUTDIR)/%.o: %.f90
+ 	$(FC) $(FFLAGS) -c $< -o $@ -J$(MODDIR)	-I$(INCLUDE)
+ 
+ %.d: %.f90
+ 	@set -e; rm -f $@; \
+ 	$(FC) -E -cpp -MM $< -MF $@.$$$$ > /dev/null; \
+ 	sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@; \
+ 	rm -f $@.$$$$
+ 
+ checkdir:
+ 	@mkdir -p $(OUTDIR); \
+ 	mkdir -p $(MODDIR);
+ 
+ -include $(SRC:.f90=.d)
+       
+ .PHONY: clean checkdir
  clean:
! 	rm -rf *.d *.s $(OUTDIR)/*.o
diff -crB fast_build_structure/nwtc/source/SysGnuLinux.f90 new_build_structure/nwtc/source/SysGnuLinux.f90
*** fast_build_structure/nwtc/source/SysGnuLinux.f90	2012-12-12 22:17:38.000000000 +0100
--- new_build_structure/nwtc/source/SysGnuLinux.f90	2013-04-08 10:28:54.000000000 +0200
***************
*** 732,738 ****
  
  
  
!    WRITE (CU,'(''+'',A)')  Str
  
  
     RETURN
--- 732,738 ----
  
  
  
!    WRITE (CU,'(A)',ADVANCE='NO')  Str//CHAR(13)
  
  
     RETURN
diff -crB fast_build_structure/nwtc/source/SysMatlab.f90 new_build_structure/nwtc/source/SysMatlab.f90
*** fast_build_structure/nwtc/source/SysMatlab.f90	2012-12-12 22:17:38.000000000 +0100
--- new_build_structure/nwtc/source/SysMatlab.f90	2013-04-08 10:28:54.000000000 +0200
***************
*** 46,52 ****
     LOGICAL, PARAMETER            :: KBInputOK   = .FALSE.                           ! A flag to tell the program that keyboard input is allowed in the environment.
  
     CHARACTER(10), PARAMETER      :: Endian      = 'BIG_ENDIAN'                      ! The internal format of numbers.
!    CHARACTER( 1), PARAMETER      :: PathSep     = '\'                               ! The path separater.
     CHARACTER( 1), PARAMETER      :: SwChar      = '/'                               ! The switch character for command-line options.
     CHARACTER(11), PARAMETER      :: UnfForm     = 'UNFORMATTED'                     ! The string to specify unformatted I/O files.
  
--- 46,52 ----
     LOGICAL, PARAMETER            :: KBInputOK   = .FALSE.                           ! A flag to tell the program that keyboard input is allowed in the environment.
  
     CHARACTER(10), PARAMETER      :: Endian      = 'BIG_ENDIAN'                      ! The internal format of numbers.
!    CHARACTER( 1), PARAMETER      :: PathSep     = '/'                               ! The path separater.
     CHARACTER( 1), PARAMETER      :: SwChar      = '/'                               ! The switch character for command-line options.
     CHARACTER(11), PARAMETER      :: UnfForm     = 'UNFORMATTED'                     ! The string to specify unformatted I/O files.
  
***************
*** 61,67 ****
        ! corresponding to a file unit number or returns -1 on error.
  
  
!    USE                             IFPORT
  
  
        ! Argument declarations:
--- 61,67 ----
        ! corresponding to a file unit number or returns -1 on error.
  
  
!    !USE                             IFPORT
  
  
        ! Argument declarations:
***************
*** 162,168 ****
        ! It is especially useful when printing "running..." type messages.
  
  
!    USE                             IFPORT
  
  
        ! Argument declarations:
--- 162,168 ----
        ! It is especially useful when printing "running..." type messages.
  
  
!    !USE                             IFPORT
  
  
        ! Argument declarations:
***************
*** 242,248 ****
        ! This routine retrieves the path of the current working directory.
  
  
!    USE                             IFPORT
  
     IMPLICIT                        NONE
  
--- 242,248 ----
        ! This routine retrieves the path of the current working directory.
  
  
!    !USE                             IFPORT
  
     IMPLICIT                        NONE
  
***************
*** 267,273 ****
     ! Note: The functionality in this routine was replaced by GET_ENVIRONMENT_VARIABLE(), which will be available intrinsically in Fortran 2000.
  
  
!    USE                             IFPORT
  
  
        ! Function declaration.
--- 267,273 ----
     ! Note: The functionality in this routine was replaced by GET_ENVIRONMENT_VARIABLE(), which will be available intrinsically in Fortran 2000.
  
  
!    !USE                             IFPORT
  
  
        ! Function declaration.
***************
*** 295,301 ****
        ! It should be replaced with IEEE_IS_NAN in new code, but remains here for
        ! backwards compatibility.
  
!    USE                             IFPORT !remove with use of next line (not implemented in all versions of the IVF compiler)
  !  USE, INTRINSIC :: ieee_arithmetic
  
  
--- 295,301 ----
        ! It should be replaced with IEEE_IS_NAN in new code, but remains here for
        ! backwards compatibility.
  
!    !USE                             IFPORT !remove with use of next line (not implemented in all versions of the IVF compiler)
  !  USE, INTRINSIC :: ieee_arithmetic
  
  
diff -crB fast_build_structure/turbsim/Source/TSsubs.f90 new_build_structure/turbsim/Source/TSsubs.f90
*** fast_build_structure/turbsim/Source/TSsubs.f90	2012-09-25 13:41:58.000000000 +0200
--- new_build_structure/turbsim/Source/TSsubs.f90	2013-04-08 10:28:55.000000000 +0200
***************
*** 3157,3163 ****
        IF ( KHtest ) THEN
  
           CText = 'les'
!          CTEventFile = TRIM(CTEventPath)//'\Events.xtm'
  
           CALL WrScr( ' LES events will be used for the KH test.' )
  
--- 3157,3163 ----
        IF ( KHtest ) THEN
  
           CText = 'les'
!          CTEventFile = TRIM(CTEventPath)//'/Events.xtm'
  
           CALL WrScr( ' LES events will be used for the KH test.' )
  
***************
*** 3177,3183 ****
               ENDIF
           ENDIF
  
!          CTEventFile = TRIM(CTEventPath)//'\Events.'//TRIM(CText)
  
        ENDIF
  
--- 3177,3183 ----
               ENDIF
           ENDIF
  
!          CTEventFile = TRIM(CTEventPath)//'/Events.'//TRIM(CText)
  
        ENDIF
  
***************
*** 7823,7829 ****
  
  
        WRITE ( InpFile, '(I5.5)' ) EventName( PtrCurr%EventNum )
!       InpFile = TRIM( CTEventPath )//'\Event'//TRIM( InpFile)//'.dat'
  
        CALL OpenFInpFile( UnIn, InpFile )
  
--- 7823,7829 ----
  
  
        WRITE ( InpFile, '(I5.5)' ) EventName( PtrCurr%EventNum )
!       InpFile = TRIM( CTEventPath )//'/Event'//TRIM( InpFile)//'.dat'
  
        CALL OpenFInpFile( UnIn, InpFile )
  
